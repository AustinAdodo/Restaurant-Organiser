// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Restaurant_Menu_Organiser.Data;

namespace Restaurant_Menu_Organiser.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220212183724_Modify1")]
    partial class Modify1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Restaurant_Menu_Organiser.Models.Countries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassificationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryClassification")
                        .HasColumnType("int");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Restaurant_Menu_Organiser.Models.Employees.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmployeeActivities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(50000);

                    b.Property<decimal>("EmployeeBasicAllowance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("EmployeeBasicSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EmployeeDOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeDepartment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EmployeeEmploymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeIdExtId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeLGAOfOrigin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeMiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeNationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("EmployeeOtherAllowance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EmployeePhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeRemarks")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(50000);

                    b.Property<string>("EmployeeResidence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeSex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeStateOfOrigin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Restaurant_Menu_Organiser.Models.Items.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClassificationId")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryAlias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassificationId = 1000001,
                            Country = "Nigeria",
                            CountryAlias = "Nigerian",
                            DateCreated = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExternalId = "NaijaJellof001",
                            Name = "Nigerian Party Jellof Rice"
                        },
                        new
                        {
                            Id = 2,
                            ClassificationId = 1000001,
                            Country = "Nigeria",
                            CountryAlias = "Nigerian",
                            DateCreated = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExternalId = "NaijaEba&Egusi001",
                            Name = "Eba & Egusi"
                        },
                        new
                        {
                            Id = 3,
                            ClassificationId = 1000001,
                            Country = "Nigeria",
                            CountryAlias = "Nigerian",
                            DateCreated = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExternalId = "NaijaPoundedYam&Egusii001",
                            Name = "Pounded Yam & Egusi"
                        },
                        new
                        {
                            Id = 4,
                            ClassificationId = 1000001,
                            Country = "Nigeria",
                            CountryAlias = "Nigerian",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExternalId = "NaijaEba&Egusi001",
                            Name = "Potato & Chips"
                        },
                        new
                        {
                            Id = 5,
                            ClassificationId = 1000001,
                            Country = "South-Korea",
                            CountryAlias = "Korean",
                            DateCreated = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExternalId = "KoreanBeefBulgogi001",
                            Name = "Beef Bulgogi",
                            pictureUrl = "/Food/BeefBulgogi.jpg"
                        },
                        new
                        {
                            Id = 6,
                            ClassificationId = 1000001,
                            Country = "India",
                            CountryAlias = "Indian",
                            DateCreated = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExternalId = "KoreanBeefBulgogi001",
                            Name = "Dal Makhani"
                        },
                        new
                        {
                            Id = 7,
                            ClassificationId = 1000001,
                            Country = "South-Korea",
                            CountryAlias = "Korean",
                            DateCreated = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExternalId = "KoreanBeefBulgogi001",
                            Name = "Donburi",
                            pictureUrl = "/Food/Donburi.jpg"
                        },
                        new
                        {
                            Id = 8,
                            ClassificationId = 1000001,
                            Country = "South-Korea",
                            CountryAlias = "Korean",
                            DateCreated = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExternalId = "KoreanBeefBulgogi001",
                            Name = "Samgyeopsal",
                            pictureUrl = "/Food/Samgyeopsal.jpg"
                        },
                        new
                        {
                            Id = 9,
                            ClassificationId = 1000001,
                            Country = "South-Korea",
                            CountryAlias = "Korean",
                            DateCreated = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExternalId = "KoreanBeefBulgogi001",
                            Name = "Sweet & Sour Soup",
                            pictureUrl = "/Food/SweetSourSoup.jpg"
                        },
                        new
                        {
                            Id = 10,
                            ClassificationId = 1000001,
                            Country = "South-Korea",
                            CountryAlias = "Korean",
                            DateCreated = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExternalId = "KoreanKimchi001",
                            Name = "Kimchi",
                            pictureUrl = "/Food/Kimchi.jpg"
                        },
                        new
                        {
                            Id = 11,
                            ClassificationId = 10000010,
                            Country = "South-Korea",
                            CountryAlias = "Korean",
                            DateCreated = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExternalId = "KoreanBeefBulgogi001",
                            Name = "Bimbimbap",
                            pictureUrl = "/Food/Bibimbap.jpg"
                        },
                        new
                        {
                            Id = 12,
                            ClassificationId = 10000011,
                            Country = "India",
                            CountryAlias = "Indian",
                            DateCreated = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExternalId = "IndiaKorma001",
                            Name = "Korma",
                            pictureUrl = "/Food/Korma.jpg"
                        },
                        new
                        {
                            Id = 13,
                            ClassificationId = 10000020,
                            Country = "China",
                            CountryAlias = "Chinese",
                            DateCreated = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExternalId = "ChinaPeckingSoup001",
                            Name = "Pecking Soup",
                            pictureUrl = "/Food/PeckingSoup.jpg"
                        },
                        new
                        {
                            Id = 14,
                            ClassificationId = 10000020,
                            Country = "China",
                            CountryAlias = "Chinese",
                            DateCreated = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExternalId = "ChinaCalamariFries&Chips001",
                            Name = "Calamari Fries & Chips",
                            pictureUrl = "/Food/CalamariFriesandChips.jpg"
                        },
                        new
                        {
                            Id = 15,
                            ClassificationId = 10000020,
                            Country = "China",
                            CountryAlias = "Chinese",
                            DateCreated = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExternalId = "ChinaGrilledSalmon001",
                            Name = "Grilled Salmon",
                            pictureUrl = "/Food/GrilledSalmon.jpg"
                        },
                        new
                        {
                            Id = 16,
                            ClassificationId = 10000020,
                            Country = "China",
                            CountryAlias = "Chinese",
                            DateCreated = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExternalId = "ChinaTofuMushrooms001",
                            Name = "Tofu Mushroom",
                            pictureUrl = "/Food/TofuMushroomSoup.jpg"
                        },
                        new
                        {
                            Id = 17,
                            ClassificationId = 10000020,
                            Country = "Italy",
                            CountryAlias = "Italian",
                            DateCreated = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExternalId = "ItalyPenne001",
                            Name = "Penne",
                            pictureUrl = "/Food/Penne.jpg"
                        },
                        new
                        {
                            Id = 18,
                            ClassificationId = 10000020,
                            Country = "Ghana",
                            CountryAlias = "Ghanian",
                            DateCreated = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExternalId = "GhanaRedRed001",
                            Name = "Red Red",
                            pictureUrl = "/Food/RedRed.jpg"
                        },
                        new
                        {
                            Id = 19,
                            ClassificationId = 10000020,
                            Country = "India",
                            CountryAlias = "Indian",
                            DateCreated = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExternalId = "ChinaPalakPaneer001",
                            Name = "Palak Paneer",
                            pictureUrl = "/Food/PalakPaneer.jpg"
                        },
                        new
                        {
                            Id = 20,
                            ClassificationId = 10000020,
                            Country = "India",
                            CountryAlias = "Chinese",
                            DateCreated = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExternalId = "ChinaChickenTikkaMasalas001",
                            Name = "Chicken Tikka Masala",
                            pictureUrl = "/Food/ChickenTikkaMasala.jpg"
                        },
                        new
                        {
                            Id = 21,
                            ClassificationId = 10000020,
                            Country = "China",
                            CountryAlias = "Chinese",
                            DateCreated = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExternalId = "ChinaChineseFriedRice001",
                            Name = "Chinese Fried Rice",
                            pictureUrl = "/Food/ChineseFriedRice.jpg"
                        },
                        new
                        {
                            Id = 22,
                            ClassificationId = 10000020,
                            Country = "Italy",
                            CountryAlias = "Italian",
                            DateCreated = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExternalId = "ItalyRavioli001",
                            Name = "Ravioli",
                            pictureUrl = "/Food/Ravioli.jpg"
                        },
                        new
                        {
                            Id = 23,
                            ClassificationId = 10000020,
                            Country = "Italy",
                            CountryAlias = "Italian",
                            DateCreated = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExternalId = "ItalyPastaSalad001",
                            Name = "Pasta Salad",
                            pictureUrl = "/Food/PastaSalad.jpg"
                        });
                });

            modelBuilder.Entity("Restaurant_Menu_Organiser.Models.OrderStatus", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Orderdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Quantity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Table")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 101111,
                            ItemName = "Potato & Chips",
                            MenuStatus = "Pending",
                            Orderdate = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = "3Plates",
                            Table = 14
                        },
                        new
                        {
                            OrderId = 101112,
                            ItemName = "Doro Wot",
                            MenuStatus = "Pending",
                            Orderdate = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = "1Plates",
                            Table = 14
                        },
                        new
                        {
                            OrderId = 101113,
                            ItemName = "Bolognese Sauce & Spaghetti",
                            MenuStatus = "Served",
                            Orderdate = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = "1Plates",
                            Table = 2
                        },
                        new
                        {
                            OrderId = 101114,
                            ItemName = "Fish Curry",
                            MenuStatus = "Served",
                            Orderdate = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = "6Plates",
                            Table = 9
                        },
                        new
                        {
                            OrderId = 101115,
                            ItemName = "Ghana Banku",
                            MenuStatus = "Cancelled",
                            Orderdate = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = "1Plates",
                            Table = 10
                        },
                        new
                        {
                            OrderId = 101116,
                            ItemName = "Lamb Vindaloo",
                            MenuStatus = "Pending",
                            Orderdate = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = "2Plates",
                            Table = 8
                        },
                        new
                        {
                            OrderId = 101117,
                            ItemName = "Pasta Primavera",
                            MenuStatus = "Served",
                            Orderdate = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = "1Plates",
                            Table = 12
                        },
                        new
                        {
                            OrderId = 101118,
                            ItemName = "Cooked Chinese Peppered Lobster",
                            MenuStatus = "Served",
                            Orderdate = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = "1Plates",
                            Table = 5
                        });
                });

            modelBuilder.Entity("Restaurant_Menu_Organiser.Models.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RestaurantName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("SaleTime")
                        .HasColumnType("time");

                    b.Property<string>("StaffName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SumTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("orderPlacement")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sales");

                    b.HasData(
                        new
                        {
                            Id = 10000001,
                            ItemName = "Nigerian Party Jellof Rice",
                            PaymentType = "Stripe",
                            Price = 2.00m,
                            Quantity = 2m,
                            RestaurantName = "Happy Restaurant",
                            SaleDate = new DateTime(2022, 2, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            SaleTime = new TimeSpan(0, 0, 0, 0, 0),
                            StaffName = "Happy Cheff1",
                            SumTotal = 4.00m,
                            orderPlacement = "Internal"
                        },
                        new
                        {
                            Id = 10000002,
                            ItemName = "Kimchi",
                            PaymentType = "POS",
                            Price = 3.40m,
                            Quantity = 2m,
                            RestaurantName = "Happy Restaurant",
                            SaleDate = new DateTime(2022, 2, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            SaleTime = new TimeSpan(0, 0, 0, 0, 0),
                            StaffName = "Happy Cheff1",
                            SumTotal = 6.80m,
                            orderPlacement = "Internal"
                        },
                        new
                        {
                            Id = 10000003,
                            ItemName = "Kimchi",
                            PaymentType = "POS",
                            Price = 2.40m,
                            Quantity = 4.00m,
                            RestaurantName = "Happy Restaurant",
                            SaleDate = new DateTime(2022, 2, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            SaleTime = new TimeSpan(0, 0, 0, 0, 0),
                            StaffName = "Happy Cheff1",
                            SumTotal = 9.60m,
                            orderPlacement = "Internal"
                        },
                        new
                        {
                            Id = 10000004,
                            ItemName = "Dal Makhani",
                            PaymentType = "POS",
                            Price = 1.50m,
                            Quantity = 2m,
                            RestaurantName = "Happy Restaurant",
                            SaleDate = new DateTime(2022, 2, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            SaleTime = new TimeSpan(0, 0, 0, 0, 0),
                            StaffName = "Happy Cheff1",
                            SumTotal = 3.00m,
                            orderPlacement = "Internal"
                        },
                        new
                        {
                            Id = 10000005,
                            ItemName = "Sweet & Sour Soup",
                            PaymentType = "POS",
                            Price = 1.20m,
                            Quantity = 2m,
                            RestaurantName = "Happy Restaurant",
                            SaleDate = new DateTime(2022, 2, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            SaleTime = new TimeSpan(0, 0, 0, 0, 0),
                            StaffName = "Happy Cheff1",
                            SumTotal = 2.40m,
                            orderPlacement = "Internal"
                        },
                        new
                        {
                            Id = 10000006,
                            ItemName = "Tofu Mushroom",
                            PaymentType = "POS",
                            Price = 5.00m,
                            Quantity = 1m,
                            RestaurantName = "Happy Restaurant",
                            SaleDate = new DateTime(2022, 2, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            SaleTime = new TimeSpan(0, 0, 0, 0, 0),
                            StaffName = "Happy Cheff1",
                            SumTotal = 5.000m,
                            orderPlacement = "Internal"
                        },
                        new
                        {
                            Id = 10000007,
                            ItemName = "Calamari Fries & Chips",
                            PaymentType = "POS",
                            Price = 1.00m,
                            Quantity = 6m,
                            RestaurantName = "Happy Restaurant",
                            SaleDate = new DateTime(2022, 2, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            SaleTime = new TimeSpan(0, 0, 0, 0, 0),
                            StaffName = "Happy Cheff1",
                            SumTotal = 6.00m,
                            orderPlacement = "Internal"
                        },
                        new
                        {
                            Id = 10000009,
                            ItemName = "Bimbimbap",
                            PaymentType = "POS",
                            Price = 2.00m,
                            Quantity = 2m,
                            RestaurantName = "Happy Restaurant",
                            SaleDate = new DateTime(2022, 2, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            SaleTime = new TimeSpan(0, 0, 0, 0, 0),
                            StaffName = "Happy Cheff1",
                            SumTotal = 4.00m,
                            orderPlacement = "Internal"
                        },
                        new
                        {
                            Id = 10000010,
                            ItemName = "Korma",
                            PaymentType = "POS",
                            Price = 2.50m,
                            Quantity = 2m,
                            RestaurantName = "Happy Restaurant",
                            SaleDate = new DateTime(2022, 2, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            SaleTime = new TimeSpan(0, 0, 0, 0, 0),
                            StaffName = "Happy Cheff1",
                            SumTotal = 5.00m,
                            orderPlacement = "Internal"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
